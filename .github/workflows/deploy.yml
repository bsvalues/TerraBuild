name: Deploy Pipeline

on:
  workflow_run:
    workflows: ["CI Pipeline"]
    types:
      - completed
    branches:
      - main
      - develop

jobs:
  deploy-staging:
    name: Deploy to Staging
    if: ${{ github.event.workflow_run.conclusion == 'success' && github.ref == 'refs/heads/develop' }}
    runs-on: ubuntu-latest
    environment: staging
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
      
      - name: Set up Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: "1.5.7"
      
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}
      
      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1
      
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2
      
      - name: Build and push Docker image
        uses: docker/build-push-action@v4
        with:
          context: .
          push: true
          tags: |
            ${{ steps.login-ecr.outputs.registry }}/terrabuild:${{ github.sha }}
            ${{ steps.login-ecr.outputs.registry }}/terrabuild:staging-latest
          cache-from: type=gha
          cache-to: type=gha,mode=max
      
      - name: Initialize Terraform
        working-directory: ./terraform
        run: terraform init -backend-config=environments/staging/backend.tfvars
      
      - name: Apply Terraform for staging
        working-directory: ./terraform
        run: |
          terraform plan -var-file=environments/staging/terraform.tfvars -var="app_image=${{ steps.login-ecr.outputs.registry }}/terrabuild:${{ github.sha }}" -out=tfplan
          terraform apply -auto-approve tfplan
      
      - name: Run post-deployment smoke tests
        run: |
          # Wait for new deployment to stabilize
          sleep 30
          # Replace with actual smoke test command
          curl -s https://staging-api.terrabuild.example.com/api/health | grep -q "status":"healthy"
      
      - name: Send deployment notification
        uses: slackapi/slack-github-action@v1.23.0
        with:
          payload: |
            {
              "text": "Deployment to staging completed successfully! :rocket:\nVersion: ${{ github.sha }}\nDeployed by: ${{ github.actor }}"
            }
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
  
  deploy-production:
    name: Deploy to Production
    if: ${{ github.event.workflow_run.conclusion == 'success' && github.ref == 'refs/heads/main' }}
    runs-on: ubuntu-latest
    environment: production
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
      
      - name: Set up Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: "1.5.7"
      
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}
      
      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1
      
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2
      
      - name: Build and push Docker image
        uses: docker/build-push-action@v4
        with:
          context: .
          push: true
          tags: |
            ${{ steps.login-ecr.outputs.registry }}/terrabuild:${{ github.sha }}
            ${{ steps.login-ecr.outputs.registry }}/terrabuild:production-latest
          cache-from: type=gha
          cache-to: type=gha,mode=max
      
      - name: Initialize Terraform
        working-directory: ./terraform
        run: terraform init -backend-config=environments/production/backend.tfvars
      
      - name: Apply Terraform for production
        working-directory: ./terraform
        run: |
          terraform plan -var-file=environments/production/terraform.tfvars -var="app_image=${{ steps.login-ecr.outputs.registry }}/terrabuild:${{ github.sha }}" -out=tfplan
          terraform apply -auto-approve tfplan
      
      - name: Run post-deployment verification
        run: |
          # Wait for new deployment to stabilize
          sleep 60
          # Replace with actual verification command
          curl -s https://api.terrabuild.example.com/api/health | grep -q "status":"healthy"
      
      - name: Send deployment notification
        uses: slackapi/slack-github-action@v1.23.0
        with:
          payload: |
            {
              "text": "ðŸŽ‰ *Production Deployment Successful* ðŸŽ‰\nVersion: ${{ github.sha }}\nDeployed by: ${{ github.actor }}\nCheck it out at https://terrabuild.example.com"
            }
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}