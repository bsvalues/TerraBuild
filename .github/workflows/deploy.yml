name: Deploy

on:
  push:
    branches:
      - main
      - develop
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to deploy to'
        required: true
        default: 'dev'
        type: choice
        options:
          - dev
          - staging
          - prod

jobs:
  determine_environment:
    name: Determine Environment
    runs-on: ubuntu-latest
    outputs:
      environment: ${{ steps.set-env.outputs.environment }}
    steps:
      - id: set-env
        run: |
          if [ "${{ github.event_name }}" == "workflow_dispatch" ]; then
            echo "environment=${{ github.event.inputs.environment }}" >> $GITHUB_OUTPUT
          elif [ "${{ github.ref }}" == "refs/heads/main" ]; then
            echo "environment=prod" >> $GITHUB_OUTPUT
          elif [ "${{ github.ref }}" == "refs/heads/develop" ]; then
            echo "environment=dev" >> $GITHUB_OUTPUT
          else
            echo "environment=dev" >> $GITHUB_OUTPUT
          fi
  
  deploy:
    name: Deploy to ${{ needs.determine_environment.outputs.environment }}
    runs-on: ubuntu-latest
    needs: determine_environment
    environment: ${{ needs.determine_environment.outputs.environment }}
    
    steps:
      - uses: actions/checkout@v3
      
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-west-2
          
      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1
      
      - name: Build and push Docker image
        uses: docker/build-push-action@v4
        with:
          context: .
          push: true
          tags: |
            ${{ steps.login-ecr.outputs.registry }}/terrafusion:${{ github.sha }}
            ${{ steps.login-ecr.outputs.registry }}/terrafusion:latest
      
      - name: Install Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: 1.4.5
      
      - name: Terraform Init
        run: |
          cd terraform/environments/${{ needs.determine_environment.outputs.environment }}
          terraform init
      
      - name: Terraform Plan
        run: |
          cd terraform/environments/${{ needs.determine_environment.outputs.environment }}
          terraform plan -var="app_version=${{ github.sha }}" -out=tfplan
        
      - name: Terraform Apply
        run: |
          cd terraform/environments/${{ needs.determine_environment.outputs.environment }}
          terraform apply -auto-approve tfplan
      
      - name: Deploy Database Migrations
        run: |
          npm ci
          npm run db:migrate
        env:
          DATABASE_URL: ${{ secrets.DATABASE_URL }}
          NODE_ENV: ${{ needs.determine_environment.outputs.environment }}
          
      - name: Health Check
        run: |
          HEALTH_URL=$(cd terraform/environments/${{ needs.determine_environment.outputs.environment }} && terraform output -raw api_health_url)
          attempts=0
          max_attempts=30
          until $(curl --output /dev/null --silent --fail $HEALTH_URL) || [ $attempts -eq $max_attempts ]; do
            attempts=$((attempts+1))
            echo "Waiting for deployment to be ready... ($attempts/$max_attempts)"
            sleep 10
          done
          
          if [ $attempts -eq $max_attempts ]; then
            echo "Deployment failed health check"
            exit 1
          fi
          
          echo "Deployment successful"

  notify:
    name: Notify Deployment Status
    runs-on: ubuntu-latest
    needs: [deploy]
    if: always()
    steps:
      - name: Notify Slack
        uses: rtCamp/action-slack-notify@v2
        env:
          SLACK_WEBHOOK: ${{ secrets.SLACK_WEBHOOK }}
          SLACK_CHANNEL: deployments
          SLACK_TITLE: Deployment ${{ needs.deploy.result == 'success' && 'Successful' || 'Failed' }}
          SLACK_MESSAGE: |
            Environment: ${{ needs.determine_environment.outputs.environment }}
            Branch: ${{ github.ref_name }}
            Commit: ${{ github.sha }}
            Status: ${{ needs.deploy.result == 'success' && '✅ Success' || '❌ Failed' }}
          SLACK_COLOR: ${{ needs.deploy.result == 'success' && 'good' || 'danger' }}