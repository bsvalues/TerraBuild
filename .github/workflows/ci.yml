name: TerraBuild CI/CD Pipeline

on:
  push:
    branches: 
      - main
      - develop
  pull_request:
    branches:
      - main
      - develop

jobs:
  build:
    name: Build and Test
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
      
      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '20'
          cache: 'npm'
      
      - name: Install dependencies
        run: npm ci
      
      - name: Run linting
        run: npm run lint || true
      
      - name: Run tests
        run: npm test
        env:
          DATABASE_URL: ${{ secrets.TEST_DATABASE_URL }}
      
      - name: Build application
        run: npm run build
  
  security:
    name: Security Scan
    needs: build
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
      
      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '20'
          cache: 'npm'
      
      - name: Install dependencies
        run: npm ci
      
      - name: Run security scan
        run: |
          npm install -g snyk
          snyk test || true
  
  validate-infrastructure:
    name: Validate Infrastructure
    needs: build
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
      
      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2
      
      - name: Determine environment
        id: env
        run: |
          if [[ "${{ github.ref }}" == "refs/heads/main" ]]; then
            echo "ENV=prod" >> $GITHUB_OUTPUT
          else
            echo "ENV=dev" >> $GITHUB_OUTPUT
          fi
      
      - name: Terraform Init
        run: |
          cd terraform/environments/${{ steps.env.outputs.ENV }}
          terraform init -backend=false
      
      - name: Terraform Validate
        run: |
          cd terraform/environments/${{ steps.env.outputs.ENV }}
          terraform validate
  
  deploy:
    name: Deploy to AWS
    needs: [security, validate-infrastructure]
    if: github.event_name == 'push' && (github.ref == 'refs/heads/develop' || github.ref == 'refs/heads/main')
    runs-on: ubuntu-latest
    environment: ${{ github.ref == 'refs/heads/main' && 'production' || 'development' }}
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
      
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-west-2
      
      - name: Determine environment
        id: env
        run: |
          if [[ "${{ github.ref }}" == "refs/heads/main" ]]; then
            echo "ENV=prod" >> $GITHUB_OUTPUT
          else
            echo "ENV=dev" >> $GITHUB_OUTPUT
          fi
      
      - name: Make deploy script executable
        run: chmod +x ./scripts/deploy.sh
      
      - name: Deploy application
        run: ./scripts/deploy.sh --env ${{ steps.env.outputs.ENV }}
        env:
          TF_VAR_db_username: ${{ secrets.TF_VAR_DB_USERNAME }}
          TF_VAR_db_password: ${{ secrets.TF_VAR_DB_PASSWORD }}
  
  notify:
    name: Deployment Notification
    needs: deploy
    if: always() && (github.ref == 'refs/heads/develop' || github.ref == 'refs/heads/main')
    runs-on: ubuntu-latest
    
    steps:
      - name: Determine environment
        id: env
        run: |
          if [[ "${{ github.ref }}" == "refs/heads/main" ]]; then
            echo "ENV=production" >> $GITHUB_OUTPUT
          else
            echo "ENV=development" >> $GITHUB_OUTPUT
          fi
      
      - name: Determine status
        id: status
        run: |
          if [[ "${{ needs.deploy.result }}" == "success" ]]; then
            echo "ICON=✅" >> $GITHUB_OUTPUT
            echo "STATUS=successful" >> $GITHUB_OUTPUT
          else
            echo "ICON=❌" >> $GITHUB_OUTPUT
            echo "STATUS=failed" >> $GITHUB_OUTPUT
          fi
      
      - name: Generate notification message
        id: message
        run: |
          echo "::set-output name=text::${{ steps.status.outputs.ICON }} Deployment to ${{ steps.env.outputs.ENV }} ${{ steps.status.outputs.STATUS }}. Commit: ${{ github.event.after }} by ${{ github.actor }}"
      
      # Send notification to Slack, Teams, etc.
      # This is a placeholder that would be replaced with actual notification implementation
      - name: Send notification
        run: |
          echo "${{ steps.message.outputs.text }}"