name: CI Pipeline

on:
  pull_request:
    branches: [ '**' ]
  push:
    branches: [ main ]

jobs:
  code-quality:
    name: Code Quality & Security
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          fetch-depth: 0  # Required for CodeQL and SonarCloud analysis
      
      # Initialize CodeQL Analysis for security scanning
      - name: Initialize CodeQL
        uses: github/codeql-action/init@v2
        with:
          languages: javascript, typescript
      
      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '20'
          cache: 'npm'
      
      - name: Install dependencies
        run: npm ci
      
      - name: Lint
        run: npm run lint || npm run check
      
      # Dependency vulnerability scanning
      - name: Dependency scanning
        run: npx audit-ci --moderate
        continue-on-error: true
      
      # Run static code analysis
      - name: Perform CodeQL Analysis
        uses: github/codeql-action/analyze@v2
      
      # Generate code coverage report
      - name: Run unit tests with coverage
        run: npm test -- --coverage
        env:
          NODE_ENV: test
      
      # Upload coverage report
      - name: Upload coverage report
        uses: actions/upload-artifact@v3
        with:
          name: coverage-report
          path: coverage/
        if: success()

  test-and-build:
    name: Test and Build
    runs-on: ubuntu-latest
    needs: code-quality
    
    services:
      docker:
        image: docker:20.10.16
        options: --privileged
      
      postgres:
        image: postgres:15
        env:
          POSTGRES_USER: bcbs
          POSTGRES_PASSWORD: bcbs
          POSTGRES_DB: bcbs_test
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
      
      redis:
        image: redis:7
        ports:
          - 6379:6379
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
      
      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '20'
          cache: 'npm'
      
      - name: Install dependencies
        run: npm ci
      
      # Scan Docker image for vulnerabilities
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2
      
      - name: Build Docker images
        run: docker-compose build
      
      - name: Scan Docker image for vulnerabilities
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: 'bcbs-app_web:latest'
          format: 'table'
          exit-code: '0'
          severity: 'CRITICAL,HIGH'
      
      - name: Start services
        run: docker-compose up -d
      
      - name: Wait for services to be ready
        run: sleep 15
      
      - name: Smoke test
        run: |
          # Check if the server is running
          curl --retry 5 --retry-delay 5 --retry-connrefused http://localhost:5000/ || exit 1
          
          # Run smoke tests if available
          if [ -f "npm run smoke-test" ]; then
            npm run smoke-test
          else
            echo "No smoke tests defined, skipping"
          fi
          
          # Capture application metrics during test for performance baseline
          echo "Capturing application metrics..."
          curl --retry 3 --retry-delay 2 --retry-connrefused http://localhost:5000/health > health_metrics.json || echo "Health endpoint not available"
      
      - name: Tear down
        run: docker-compose down
        if: always()
      
      - name: Build application
        run: npm run build
        if: success() && github.event_name == 'push' && github.ref == 'refs/heads/main'
      
      - name: Upload build artifacts
        uses: actions/upload-artifact@v3
        with:
          name: build-artifacts
          path: dist/
        if: success() && github.event_name == 'push' && github.ref == 'refs/heads/main'
      
      - name: Upload metrics
        uses: actions/upload-artifact@v3
        with:
          name: application-metrics
          path: health_metrics.json
        if: success()
      
      - name: Upload logs on failure
        uses: actions/upload-artifact@v3
        with:
          name: logs
          path: |
            logs/
            npm-debug.log*
            yarn-debug.log*
            yarn-error.log*
        if: failure()

  deploy-infrastructure:
    name: Deploy Infrastructure
    runs-on: ubuntu-latest
    needs: [test-and-build]
    if: success() && github.ref == 'refs/heads/main'
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
      
      - name: Set up Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: 1.6.0
      
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}
      
      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '20'
          cache: 'npm'
      
      - name: Build Lambda Functions
        run: |
          cd terrafusion/functions
          npm install
          npm run build
          mkdir -p dist
      
      - name: Deploy Infrastructure Changes
        id: terraform
        run: |
          cd terrafusion
          VERSION="v-$(date +%Y%m%d%H%M%S)"
          ./terraform-setup.sh dev plan $VERSION
          
          # Check if there are changes
          if grep -q "No changes" terraform.dev.log; then
            echo "No infrastructure changes to apply"
          else
            # Apply changes
            ./terraform-setup.sh dev apply $VERSION
          fi
      
      - name: Upload Terraform Logs
        uses: actions/upload-artifact@v3
        with:
          name: terraform-logs
          path: terrafusion/terraform.dev.log
      
      - name: Update Deployment Status
        run: |
          echo "Infrastructure deployment completed"
          # Add a deployment status badge or update a status file
          
  deploy-application:
    name: Deploy Application
    runs-on: ubuntu-latest
    needs: [deploy-infrastructure]
    if: success() && github.ref == 'refs/heads/main'
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
      
      - name: Download build artifacts
        uses: actions/download-artifact@v3
        with:
          name: build-artifacts
          path: ./dist
      
      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '20'
          cache: 'npm'
      
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}
      
      - name: Build Docker image
        run: |
          docker build -t bcbs-app:$GITHUB_SHA .
      
      - name: Log in to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1
      
      - name: Tag and push image to Amazon ECR
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY: bcbs-app
        run: |
          # Tag the image
          docker tag bcbs-app:$GITHUB_SHA $ECR_REGISTRY/$ECR_REPOSITORY:$GITHUB_SHA
          docker tag bcbs-app:$GITHUB_SHA $ECR_REGISTRY/$ECR_REPOSITORY:latest
          
          # Push the image
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$GITHUB_SHA
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:latest
          
          echo "::set-output name=image::$ECR_REGISTRY/$ECR_REPOSITORY:$GITHUB_SHA"
      
      - name: Deploy to ECS
        run: |
          # Get Terraform outputs
          cd terrafusion
          export VERSION="v-$(date +%Y%m%d%H%M%S)"
          ./terraform-setup.sh dev apply $VERSION
          
          # Extract values from Terraform output
          CLUSTER_NAME=$(terraform output -raw ecs_cluster_name)
          TASK_FAMILY=$(terraform output -raw task_definition_family)
          SERVICE_NAME=$(terraform output -raw blue_service_name)
          
          # Check which environment is currently active
          ACTIVE_ENV=$(terraform output -raw active_environment)
          if [ "$ACTIVE_ENV" == "blue" ]; then
            TARGET_ENV="green"
            TARGET_SERVICE=$(terraform output -raw green_service_name)
          else
            TARGET_ENV="blue"
            TARGET_SERVICE=$(terraform output -raw blue_service_name)
          fi
          
          echo "Deploying to $TARGET_ENV environment..."
          
          # Register new task definition with the new image
          aws ecs update-service --cluster $CLUSTER_NAME --service $TARGET_SERVICE --force-new-deployment
          
          # Wait for deployment to complete
          aws ecs wait services-stable --cluster $CLUSTER_NAME --services $TARGET_SERVICE
          
          echo "Deployment to $TARGET_ENV environment completed"
      
      - name: Verify Deployment
        run: |
          # Get the application URL
          cd terrafusion
          APP_URL=$(terraform output -raw app_url)
          
          # Verify health endpoint
          echo "Verifying application health..."
          curl -f https://$APP_URL/api/health || (echo "Health check failed" && exit 1)
          
          echo "Application deployment verified successfully"
  
  pipeline-metrics:
    name: Pipeline Metrics
    runs-on: ubuntu-latest
    needs: [code-quality, test-and-build, deploy-infrastructure, deploy-application]
    if: always()
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
      
      - name: Generate pipeline metrics
        run: |
          echo "Generating CI/CD pipeline metrics..."
          
          # Generate JSON with more detailed metrics
          cat <<EOF > pipeline_metrics.json
          {
            "run_id": "$GITHUB_RUN_ID",
            "workflow": "$GITHUB_WORKFLOW",
            "status": "${{ job.status }}",
            "timestamp": "$(date -u +"%Y-%m-%dT%H:%M:%SZ")",
            "commit": "$GITHUB_SHA",
            "branch": "${GITHUB_REF#refs/heads/}",
            "jobs": {
              "code_quality": "${{ needs.code-quality.result }}",
              "test_and_build": "${{ needs.test-and-build.result }}",
              "deploy_infrastructure": "${{ needs.deploy-infrastructure.result }}",
              "deploy_application": "${{ needs.deploy-application.result }}"
            }
          }
          EOF
      
      - name: Upload pipeline metrics
        uses: actions/upload-artifact@v3
        with:
          name: pipeline-metrics
          path: pipeline_metrics.json
      
      - name: Update DORA Metrics
        run: |
          echo "Updating DORA metrics..."
          
          # If all deployment steps succeeded, record successful deployment
          if [[ "${{ needs.deploy-infrastructure.result }}" == "success" && "${{ needs.deploy-application.result }}" == "success" ]]; then
            echo "Recording successful deployment in DORA metrics"
            # This would typically involve updating a database or sending metrics to a monitoring system
          fi