version: '3.8'

services:
  postgres:
    image: postgis/postgis:14-3.2
    container_name: terrabuild-postgres
    environment:
      POSTGRES_DB: terrabuild
      POSTGRES_USER: terrabuild
      POSTGRES_PASSWORD: ${DB_PASSWORD:-secure_password}
      POSTGRES_INITDB_ARGS: "--encoding=UTF-8 --lc-collate=en_US.UTF-8 --lc-ctype=en_US.UTF-8"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./scripts/init-extensions.sql:/docker-entrypoint-initdb.d/01-extensions.sql
    ports:
      - "${DB_PORT:-5432}:5432"
    networks:
      - terrabuild-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U terrabuild -d terrabuild"]
      interval: 10s
      timeout: 5s
      retries: 5

  redis:
    image: redis:7-alpine
    container_name: terrabuild-redis
    command: redis-server --appendonly yes --requirepass ${REDIS_PASSWORD:-secure_redis_password}
    volumes:
      - redis_data:/data
    ports:
      - "${REDIS_PORT:-6379}:6379"
    networks:
      - terrabuild-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "incr", "ping"]
      interval: 10s
      timeout: 3s
      retries: 5

  app:
    build:
      context: .
      dockerfile: Dockerfile.enterprise
      args:
        NODE_ENV: production
        BUILD_VERSION: ${VERSION:-latest}
    container_name: terrabuild-app
    environment:
      NODE_ENV: production
      PORT: 5000
      DATABASE_URL: postgresql://terrabuild:${DB_PASSWORD:-secure_password}@postgres:5432/terrabuild
      REDIS_URL: redis://:${REDIS_PASSWORD:-secure_redis_password}@redis:6379
      JWT_SECRET: ${JWT_SECRET}
      ENCRYPTION_KEY: ${ENCRYPTION_KEY}
      MCP_SERVER_URL: http://localhost:3001
      SESSION_SECRET: ${SESSION_SECRET}
      CORS_ORIGIN: ${CORS_ORIGIN:-https://localhost}
    volumes:
      - app_logs:/app/logs
      - ./uploads:/app/uploads
    ports:
      - "${APP_PORT:-5000}:5000"
    networks:
      - terrabuild-network
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:5000/api/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  nginx:
    image: nginx:alpine
    container_name: terrabuild-nginx
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/ssl:/etc/ssl/terrabuild:ro
      - ./client/dist:/usr/share/nginx/html:ro
      - nginx_logs:/var/log/nginx
    ports:
      - "80:80"
      - "443:443"
    networks:
      - terrabuild-network
    depends_on:
      - app
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "wget", "--quiet", "--tries=1", "--spider", "http://localhost/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  mcp-server:
    build:
      context: ./server/mcp
      dockerfile: Dockerfile
    container_name: terrabuild-mcp
    environment:
      NODE_ENV: production
      MCP_PORT: 3001
      DATABASE_URL: postgresql://terrabuild:${DB_PASSWORD:-secure_password}@postgres:5432/terrabuild
      OPENAI_API_KEY: ${OPENAI_API_KEY}
      ANTHROPIC_API_KEY: ${ANTHROPIC_API_KEY}
    volumes:
      - mcp_logs:/app/logs
    ports:
      - "${MCP_PORT:-3001}:3001"
    networks:
      - terrabuild-network
    depends_on:
      postgres:
        condition: service_healthy
    restart: unless-stopped

  prometheus:
    image: prom/prometheus:latest
    container_name: terrabuild-prometheus
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_data:/prometheus
    ports:
      - "${PROMETHEUS_PORT:-9090}:9090"
    networks:
      - terrabuild-network
    restart: unless-stopped
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--web.enable-lifecycle'

  grafana:
    image: grafana/grafana:latest
    container_name: terrabuild-grafana
    environment:
      GF_SECURITY_ADMIN_USER: ${GRAFANA_USER:-admin}
      GF_SECURITY_ADMIN_PASSWORD: ${GRAFANA_PASSWORD:-admin123}
      GF_USERS_ALLOW_SIGN_UP: false
      GF_SERVER_ROOT_URL: https://localhost/grafana/
      GF_SERVER_SERVE_FROM_SUB_PATH: true
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana/dashboards:/etc/grafana/provisioning/dashboards:ro
      - ./monitoring/grafana/datasources:/etc/grafana/provisioning/datasources:ro
    ports:
      - "${GRAFANA_PORT:-3000}:3000"
    networks:
      - terrabuild-network
    depends_on:
      - prometheus
    restart: unless-stopped

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  app_logs:
    driver: local
  nginx_logs:
    driver: local
  mcp_logs:
    driver: local
  prometheus_data:
    driver: local
  grafana_data:
    driver: local

networks:
  terrabuild-network:
    driver: bridge
    ipam:
      driver: default
      config:
        - subnet: 172.20.0.0/16