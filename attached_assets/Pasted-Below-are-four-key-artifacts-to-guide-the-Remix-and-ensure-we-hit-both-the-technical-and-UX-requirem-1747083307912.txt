Below are four key artifacts to guide the Remix and ensure we hit both the technical and UX requirements:

---

**bootstrap-dev-checkoff.md**

```markdown
# bootstrap-dev-checkoff Prompt

As the Replit AI Agent, perform the following steps in order:

1. **Initial Health Check**
   - Run linting, type checks, and build scripts.
   - Report any errors or warnings.

2. **Disable Sign-In**
   - For the duration of development, disable the authentication flow to simplify testing.

3. **Plan Review**
   - Analyze the existing implementation plan for the cost-modeling plugin and UX improvements.
   - Propose a detailed next-phase roadmap with milestones and deliverables.

4. **Roadmap Confirmation**
   - Present the proposed roadmap for approval.
   - Incorporate feedback and finalize the sequence of tasks.

5. **Test-Driven Development**
   - Scaffold a minimal test suite covering core cost-engine functionality and API endpoints.
   - Run the tests and ensure they pass before writing any new feature code.

6. **Feature Implementation**
   - Once tests are green, refactor and add features strictly according to the approved roadmap.
```

---

**PRD.md**

```markdown
# Product Requirements Document

## 1. Purpose & Scope
- **Objective:** Integrate a data-driven cost-modeling engine into TerraFusion, replacing the hard-wired Marshall & Swift dependency, and elevate end-user experience with intuitive workflows.
- **Scope:**  
  - Externalize cost factors into JSON data packs  
  - Scaffold a first-class CostFactorTables plugin  
  - Update API and UI to consume the new engine  
  - Embed UX research and prototyping phases  

## 2. Goals & Success Metrics
| Goal                                         | Metric                                    |
|----------------------------------------------|-------------------------------------------|
| Replace M&S with JSON-driven RSMeans support | 100% of cost calculations sourced from JSON |
| Smooth onboarding for assessors              | < 2 hours average time to first valuation |
| Error-free builds after remix                | Zero CI failures on main branch           |
| Positive UX feedback                         | ≥ 90% usability score in internal testing |

## 3. User Personas
1. **County Assessor**  
   - Needs fast, accurate cost estimates; minimal technical overhead  
2. **Appraisal Clerk**  
   - Focuses on batch processing; values clear feedback on errors  
3. **External Reviewer (AMC)**  
   - Verifies output; demands standardized, audit-ready reports  

## 4. Key Features
1. **Data-Driven Cost Engine**  
   - Load cost factors from `data/costFactors.json`  
   - Toggle between M&S vs. RSMeans via `terra.json` flag  
2. **CostFactorTables Plugin**  
   - First-class integration, discoverable in the main UI  
3. **UX & Onboarding Flow**  
   - Guided setup wizard for first-time users  
   - Inline tooltips and contextual help  
4. **Testing & Quality**  
   - Comprehensive unit/integration tests  
   - CI pipeline checks (lint, build, test)  

## 5. Functional Requirements
- **FR-1:** System shall load cost factors at runtime from JSON.  
- **FR-2:** API shall expose `/api/cost/estimate` endpoint.  
- **FR-3:** UI shall render a “Cost Breakdown” panel.  

## 6. Non-Functional Requirements
- **Performance:** <100 ms average response for cost API  
- **Security:** Role-based access control for cost modules  
- **Maintainability:** < 10% duplicated code; modular code structure  

## 7. UX/UI Requirements
- Mobile-responsive design  
- High-contrast, assessor-friendly color scheme  
- Progress indicator during cost data loads  

## 8. Timeline & Milestones
1. **Week 1:** Externalize cost data & scaffold plugin  
2. **Week 2:** API integration & basic UI  
3. **Week 3:** UX prototype & internal testing  
4. **Week 4:** Final polish, documentation, and agent-driven CI remixes
```

---

**README.md**

````markdown
# TerraFusion Cost-Modeling Remix

This repository contains the code and instructions to integrate a data-driven cost-modeling engine into TerraFusion via a Replit AI Agent remix.

## Prerequisites
- Replit account with AI Agent enabled
- Node.js ≥14, Python ≥3.9 (handled by Replit)
- Docker (optional, for local workflows)

## Getting Started

1. **Remix in Replit**  
   - Open this repo in Replit and click **Remix**.  
   - When prompted, paste the contents of `bootstrap-dev-checkoff.md` as the agent prompt.

2. **Configure Flags**  
   - Edit `terra.json`:  
     ```json
     {
       "costEngine": {
         "source": "RSMeans",  // or "MarshallSwift"
         "dataFile": "data/costFactors.json"
       }
     }
     ```

3. **Run the Agent**  
   - In the Replit console, run:
     ```bash
     bash run-swarm.sh
     ```
   - Agent will perform health checks, scaffold tests, refactor code, and commit changes.

4. **Manual Verification**  
   - After the agent completes, verify:
     ```bash
     npm run lint
     npm test
     npm start
     ```
   - Visit `http://localhost:3000/cost/estimate` to see the new Cost Breakdown UI.

## Structure
````

.
├── data/
│   └── costFactors.json
├── server/
│   └── services/
│       └── costEngine/
├── src/
│   └── plugins/
│       └── CostFactorTables/
├── terra.json
├── run-swarm.sh
└── bootstrap-dev-checkoff.md

```
```

---

**DEVOPS-KIT.md**

````markdown
# DevOps Kit

Guidelines and scripts for CI/CD, testing, and deployment.

## 1. CI Pipeline (GitHub Actions / Replit Workflows)
```yaml
# .github/workflows/ci.yml
name: CI
on: [push, pull_request]
jobs:
  build-and-test:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v3
    - name: Install dependencies
      run: npm ci
    - name: Lint & Typecheck
      run: npm run lint && npm run typecheck
    - name: Run Tests
      run: npm test
````

## 2. Docker Setup

```dockerfile
# Dockerfile
FROM node:16
WORKDIR /app
COPY package*.json ./
RUN npm ci
COPY . .
CMD ["npm", "start"]
```

## 3. Data Versioning

* Use DVC to track `data/costFactors.json`:

  ```bash
  dvc init
  dvc add data/costFactors.json
  git add data/costFactors.json.dvc .gitignore
  git commit -m "Track cost factors with DVC"
  ```

## 4. Deployment

* **Staging:** Push to `staging` branch; auto-deploy via Replit’s GitHub integration.
* **Production:** Merge to `main`; manual approval step in CI.

## 5. Monitoring & Alerts

* Integrate Prometheus + Grafana for cost API metrics.
* Set up Slack notifications on CI failures.

```

---

Let me know if you’d like any edits or additional files!
```
