---
# API Gateway Ingress for TerraFusion
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: terrafusion-api-ingress
  namespace: default
  annotations:
    kubernetes.io/ingress.class: "nginx"
    cert-manager.io/cluster-issuer: "letsencrypt-prod"
    nginx.ingress.kubernetes.io/ssl-redirect: "true"
    nginx.ingress.kubernetes.io/use-regex: "true"
    nginx.ingress.kubernetes.io/rewrite-target: /$2
    # Rate limiting
    nginx.ingress.kubernetes.io/limit-rps: "50"
    # CORS configuration
    nginx.ingress.kubernetes.io/enable-cors: "true"
    nginx.ingress.kubernetes.io/cors-allow-origin: "https://terrafusion.example.com"
    nginx.ingress.kubernetes.io/cors-allow-methods: "GET, POST, PUT, DELETE, OPTIONS"
    nginx.ingress.kubernetes.io/cors-allow-headers: "DNT,X-CustomHeader,Keep-Alive,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type,Authorization"
    # Security headers
    nginx.ingress.kubernetes.io/configuration-snippet: |
      more_set_headers "X-Frame-Options: DENY";
      more_set_headers "X-Content-Type-Options: nosniff";
      more_set_headers "X-XSS-Protection: 1; mode=block";
      more_set_headers "Referrer-Policy: strict-origin-when-cross-origin";
      more_set_headers "Content-Security-Policy: default-src 'self'; script-src 'self'; img-src 'self' data:; style-src 'self' 'unsafe-inline'; font-src 'self'; connect-src 'self' https://api.terrafusion.example.com";
spec:
  tls:
  - hosts:
    - api.terrafusion.example.com
    secretName: terrafusion-api-tls
  rules:
  - host: api.terrafusion.example.com
    http:
      paths:
      - path: /api(/|$)(.*)
        pathType: Prefix
        backend:
          service:
            name: terrafusion-backend
            port:
              number: 5000
      - path: /health(/|$)(.*)
        pathType: Prefix
        backend:
          service:
            name: terrafusion-backend
            port:
              number: 5000
      - path: /swarm(/|$)(.*)
        pathType: Prefix
        backend:
          service:
            name: terrafusion-backend
            port:
              number: 5000

---
# Frontend Ingress for TerraFusion
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: terrafusion-frontend-ingress
  namespace: default
  annotations:
    kubernetes.io/ingress.class: "nginx"
    cert-manager.io/cluster-issuer: "letsencrypt-prod"
    nginx.ingress.kubernetes.io/ssl-redirect: "true"
    # Cache static assets
    nginx.ingress.kubernetes.io/configuration-snippet: |
      location ~* \.(jpg|jpeg|png|gif|ico|css|js)$ {
        expires 7d;
        add_header Cache-Control "public, max-age=604800, immutable";
      }
    # Security headers
    nginx.ingress.kubernetes.io/configuration-snippet: |
      more_set_headers "X-Frame-Options: DENY";
      more_set_headers "X-Content-Type-Options: nosniff";
      more_set_headers "X-XSS-Protection: 1; mode=block";
      more_set_headers "Referrer-Policy: strict-origin-when-cross-origin";
      more_set_headers "Content-Security-Policy: default-src 'self'; script-src 'self' 'unsafe-inline'; img-src 'self' data:; style-src 'self' 'unsafe-inline'; font-src 'self'; connect-src 'self' https://api.terrafusion.example.com";
spec:
  tls:
  - hosts:
    - terrafusion.example.com
    secretName: terrafusion-frontend-tls
  rules:
  - host: terrafusion.example.com
    http:
      paths:
      - path: /
        pathType: Prefix
        backend:
          service:
            name: terrafusion-frontend
            port:
              number: 80

---
# Network Policy to isolate backend
apiVersion: networking.k8s.io/v1
kind: NetworkPolicy
metadata:
  name: terrafusion-backend-network-policy
  namespace: default
spec:
  podSelector:
    matchLabels:
      app.kubernetes.io/name: terrafusion-backend
  policyTypes:
  - Ingress
  - Egress
  ingress:
  - from:
    # Allow frontend
    - podSelector:
        matchLabels:
          app.kubernetes.io/name: terrafusion-frontend
    - namespaceSelector:
        matchLabels:
          kubernetes.io/metadata.name: api-gateway
    ports:
    - protocol: TCP
      port: 5000
  egress:
  # Allow DB access
  - to:
    - namespaceSelector: {}
      podSelector:
        matchLabels:
          app: postgres
    ports:
    - protocol: TCP
      port: 5432
  # Allow AI agents communication
  - to:
    - namespaceSelector:
        matchLabels:
          kubernetes.io/metadata.name: terrafusion-agents
    ports:
    - protocol: TCP
      port: 4000
  # Allow Vault access
  - to:
    - namespaceSelector:
        matchLabels:
          kubernetes.io/metadata.name: vault
    ports:
    - protocol: TCP
      port: 8200
  # Allow external API calls
  - to:
    - ipBlock:
        cidr: 0.0.0.0/0
        except:
        - 10.0.0.0/8
        - 172.16.0.0/12
        - 192.168.0.0/16
    ports:
    - protocol: TCP
      port: 443

---
# Network Policy to isolate frontend
apiVersion: networking.k8s.io/v1
kind: NetworkPolicy
metadata:
  name: terrafusion-frontend-network-policy
  namespace: default
spec:
  podSelector:
    matchLabels:
      app.kubernetes.io/name: terrafusion-frontend
  policyTypes:
  - Ingress
  - Egress
  ingress:
  - from:
    - namespaceSelector:
        matchLabels:
          kubernetes.io/metadata.name: api-gateway
    ports:
    - protocol: TCP
      port: 80
  egress:
  # Allow backend API access
  - to:
    - podSelector:
        matchLabels:
          app.kubernetes.io/name: terrafusion-backend
    ports:
    - protocol: TCP
      port: 5000