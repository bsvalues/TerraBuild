apiVersion: v1
kind: Namespace
metadata:
  name: terrafusion-agents
  labels:
    name: terrafusion-agents
    part-of: terrafusion
    environment: ${ENVIRONMENT}

---
# Agent namespace network policy - restrict to only needed communications
apiVersion: networking.k8s.io/v1
kind: NetworkPolicy
metadata:
  name: agents-network-policy
  namespace: terrafusion-agents
spec:
  podSelector: {}
  policyTypes:
  - Ingress
  - Egress
  ingress:
  # Allow from backend
  - from:
    - namespaceSelector:
        matchLabels:
          kubernetes.io/metadata.name: default
      podSelector:
        matchLabels:
          app.kubernetes.io/name: terrafusion-backend
    ports:
    - protocol: TCP
      port: 4000
  # Allow from other agents
  - from:
    - namespaceSelector:
        matchLabels:
          kubernetes.io/metadata.name: terrafusion-agents
    ports:
    - protocol: TCP
      port: 4000
  # Allow from monitoring
  - from:
    - namespaceSelector:
        matchLabels:
          kubernetes.io/metadata.name: monitoring
    ports:
    - protocol: TCP
      port: 9090
  egress:
  # Allow to backend
  - to:
    - namespaceSelector:
        matchLabels:
          kubernetes.io/metadata.name: default
      podSelector:
        matchLabels:
          app.kubernetes.io/name: terrafusion-backend
    ports:
    - protocol: TCP
      port: 5000
  # Allow to Vault
  - to:
    - namespaceSelector:
        matchLabels:
          kubernetes.io/metadata.name: vault
    ports:
    - protocol: TCP
      port: 8200
  # Allow to other agents
  - to:
    - namespaceSelector:
        matchLabels:
          kubernetes.io/metadata.name: terrafusion-agents
    ports:
    - protocol: TCP
      port: 4000
  # Allow to databases
  - to:
    - namespaceSelector: {}
      podSelector:
        matchLabels:
          app: postgres
    ports:
    - protocol: TCP
      port: 5432
  # Allow external API access
  - to:
    - ipBlock:
        cidr: 0.0.0.0/0
        except:
        - 10.0.0.0/8
        - 172.16.0.0/12
        - 192.168.0.0/16
    ports:
    - protocol: TCP
      port: 443

---
# ResourceQuota for the agents namespace
apiVersion: v1
kind: ResourceQuota
metadata:
  name: agents-quota
  namespace: terrafusion-agents
spec:
  hard:
    pods: "20"
    requests.cpu: "10"
    requests.memory: 20Gi
    limits.cpu: "20"
    limits.memory: 40Gi

---
# LimitRange for the agents namespace
apiVersion: v1
kind: LimitRange
metadata:
  name: agents-limits
  namespace: terrafusion-agents
spec:
  limits:
  - default:
      memory: 1Gi
      cpu: 500m
    defaultRequest:
      memory: 256Mi
      cpu: 100m
    type: Container

---
# Service Account for Agent Pods
apiVersion: v1
kind: ServiceAccount
metadata:
  name: terrafusion-agent
  namespace: terrafusion-agents
  annotations:
    eks.amazonaws.com/role-arn: "arn:aws:iam::${AWS_ACCOUNT_ID}:role/terrafusion-agents-${ENVIRONMENT}"

---
# Factor Tuner Agent Deployment
apiVersion: apps/v1
kind: Deployment
metadata:
  name: factor-tuner
  namespace: terrafusion-agents
  labels:
    app.kubernetes.io/name: factor-tuner
    app.kubernetes.io/part-of: terrafusion-agents
    app.kubernetes.io/component: ai-agent
    agent-type: cost-analysis
spec:
  replicas: 1
  selector:
    matchLabels:
      app.kubernetes.io/name: factor-tuner
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxSurge: 1
      maxUnavailable: 0
  template:
    metadata:
      labels:
        app.kubernetes.io/name: factor-tuner
        app.kubernetes.io/part-of: terrafusion-agents
        app.kubernetes.io/component: ai-agent
        agent-type: cost-analysis
      annotations:
        vault.hashicorp.com/agent-inject: "true"
        vault.hashicorp.com/agent-inject-status: "update"
        vault.hashicorp.com/role: "agent"
        vault.hashicorp.com/agent-inject-secret-db-creds: "secret/data/terrafusion/databases/terrafusion"
        vault.hashicorp.com/agent-inject-template-db-creds: |
          {{- with secret "secret/data/terrafusion/databases/terrafusion" -}}
          export DATABASE_URL="postgresql://{{ .Data.data.username }}:{{ .Data.data.password }}@{{ .Data.data.host }}:{{ .Data.data.port }}/{{ .Data.data.dbname }}"
          {{- end -}}
        vault.hashicorp.com/agent-inject-secret-ai-keys: "secret/data/terrafusion/ai-providers"
        vault.hashicorp.com/agent-inject-template-ai-keys: |
          {{- with secret "secret/data/terrafusion/ai-providers/openai" -}}
          export OPENAI_API_KEY="{{ .Data.data.key }}"
          {{- end -}}
          {{- with secret "secret/data/terrafusion/ai-providers/anthropic" -}}
          export ANTHROPIC_API_KEY="{{ .Data.data.key }}"
          {{- end -}}
        vault.hashicorp.com/agent-inject-secret-agent-key: "secret/data/terrafusion/agents/factor-tuner/api-key"
        vault.hashicorp.com/agent-inject-template-agent-key: |
          {{- with secret "secret/data/terrafusion/agents/factor-tuner/api-key" -}}
          export AGENT_API_KEY="{{ .Data.data.key }}"
          {{- end -}}
        prometheus.io/scrape: "true"
        prometheus.io/path: "/metrics"
        prometheus.io/port: "9090"
    spec:
      serviceAccountName: terrafusion-agent
      containers:
      - name: factor-tuner
        image: ${AWS_ACCOUNT_ID}.dkr.ecr.${AWS_REGION}.amazonaws.com/terrafusion-factor-tuner:${AGENT_VERSION}
        imagePullPolicy: Always
        command: ["/bin/sh", "-c"]
        args:
        - |
          source /vault/secrets/db-creds
          source /vault/secrets/ai-keys
          source /vault/secrets/agent-key
          node server/agents/factor-tuner/index.js
        env:
        - name: NODE_ENV
          value: production
        - name: PORT
          value: "4000"
        - name: METRICS_PORT
          value: "9090"
        - name: LOG_LEVEL
          value: info
        - name: BACKEND_URL
          value: "http://terrafusion-backend.default.svc.cluster.local:5000"
        - name: AGENT_ID
          value: "factor-tuner"
        - name: AGENT_NAME
          value: "Factor Tuner"
        ports:
        - name: http
          containerPort: 4000
          protocol: TCP
        - name: metrics
          containerPort: 9090
          protocol: TCP
        livenessProbe:
          httpGet:
            path: /health
            port: http
          initialDelaySeconds: 30
          periodSeconds: 30
          timeoutSeconds: 5
          failureThreshold: 3
        readinessProbe:
          httpGet:
            path: /health/ready
            port: http
          initialDelaySeconds: 10
          periodSeconds: 10
          timeoutSeconds: 3
          failureThreshold: 2
        resources:
          limits:
            cpu: 1000m
            memory: 2Gi
          requests:
            cpu: 200m
            memory: 512Mi
        volumeMounts:
        - name: tmp
          mountPath: /tmp
        - name: training-data
          mountPath: /app/data/training/factor-tuner
        - name: model-storage
          mountPath: /app/data/models/factor-tuner
      volumes:
      - name: tmp
        emptyDir: {}
      - name: training-data
        persistentVolumeClaim:
          claimName: factor-tuner-training-data
      - name: model-storage
        persistentVolumeClaim:
          claimName: factor-tuner-model-storage
      securityContext:
        runAsUser: 1000
        runAsGroup: 1000
        fsGroup: 1000

---
# Factor Tuner Agent Service
apiVersion: v1
kind: Service
metadata:
  name: factor-tuner
  namespace: terrafusion-agents
  labels:
    app.kubernetes.io/name: factor-tuner
    app.kubernetes.io/part-of: terrafusion-agents
    app.kubernetes.io/component: ai-agent
  annotations:
    prometheus.io/scrape: "true"
    prometheus.io/path: "/metrics"
    prometheus.io/port: "9090"
spec:
  ports:
  - port: 4000
    targetPort: http
    protocol: TCP
    name: http
  - port: 9090
    targetPort: metrics
    protocol: TCP
    name: metrics
  selector:
    app.kubernetes.io/name: factor-tuner
  type: ClusterIP

---
# Persistent Volume Claims for Factor Tuner
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: factor-tuner-training-data
  namespace: terrafusion-agents
spec:
  accessModes:
    - ReadWriteOnce
  storageClassName: gp2
  resources:
    requests:
      storage: 5Gi

---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: factor-tuner-model-storage
  namespace: terrafusion-agents
spec:
  accessModes:
    - ReadWriteOnce
  storageClassName: gp2
  resources:
    requests:
      storage: 10Gi

---
# Horizontal Pod Autoscaler for Factor Tuner
apiVersion: autoscaling/v2
kind: HorizontalPodAutoscaler
metadata:
  name: factor-tuner-hpa
  namespace: terrafusion-agents
spec:
  scaleTargetRef:
    apiVersion: apps/v1
    kind: Deployment
    name: factor-tuner
  minReplicas: 1
  maxReplicas: 3
  metrics:
  - type: Resource
    resource:
      name: cpu
      target:
        type: Utilization
        averageUtilization: 70
  - type: Resource
    resource:
      name: memory
      target:
        type: Utilization
        averageUtilization: 80
  behavior:
    scaleDown:
      stabilizationWindowSeconds: 300
    scaleUp:
      stabilizationWindowSeconds: 60