version: '3.8'

# TerraFusion Production Docker Compose
# Enterprise-grade multi-service deployment with monitoring and security

services:
  # TerraFusion Application
  terrafusion-app:
    build:
      context: .
      dockerfile: Dockerfile
      target: production
    image: terrafusion:latest
    container_name: terrafusion-app
    restart: unless-stopped
    ports:
      - "3000:3000"
    environment:
      - NODE_ENV=production
      - DATABASE_URL=postgresql://terrafusion:${POSTGRES_PASSWORD}@db:5432/terrafusion
      - REDIS_URL=redis://redis:6379
      - SESSION_SECRET=${SESSION_SECRET}
      - JWT_SECRET=${JWT_SECRET}
      - PORT=3000
      - HOST=0.0.0.0
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_healthy
    volumes:
      - app-logs:/app/logs
      - app-uploads:/app/uploads
    networks:
      - terrafusion-network
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.terrafusion.rule=Host(`${DOMAIN}`)"
      - "traefik.http.routers.terrafusion.tls=true"
      - "traefik.http.routers.terrafusion.tls.certresolver=letsencrypt"
      - "traefik.http.services.terrafusion.loadbalancer.server.port=3000"

  # PostgreSQL Database
  db:
    image: postgres:15-alpine
    container_name: terrafusion-db
    restart: unless-stopped
    environment:
      - POSTGRES_DB=terrafusion
      - POSTGRES_USER=terrafusion
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_INITDB_ARGS=--encoding=UTF-8 --lc-collate=C --lc-ctype=C
    volumes:
      - postgres-data:/var/lib/postgresql/data
      - ./deployment/sql/init.sql:/docker-entrypoint-initdb.d/init.sql
    ports:
      - "5432:5432"
    networks:
      - terrafusion-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U terrafusion -d terrafusion"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s

  # Redis Cache
  redis:
    image: redis:7-alpine
    container_name: terrafusion-redis
    restart: unless-stopped
    command: redis-server --appendonly yes --requirepass ${REDIS_PASSWORD}
    volumes:
      - redis-data:/data
    ports:
      - "6379:6379"
    networks:
      - terrafusion-network
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "incr", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Nginx Reverse Proxy
  nginx:
    image: nginx:alpine
    container_name: terrafusion-nginx
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./deployment/nginx/nginx.conf:/etc/nginx/nginx.conf
      - ./deployment/nginx/sites-enabled:/etc/nginx/sites-enabled
      - ssl-certs:/etc/ssl/certs
      - app-logs:/var/log/nginx
    depends_on:
      - terrafusion-app
    networks:
      - terrafusion-network
    labels:
      - "traefik.enable=false"

  # Traefik Load Balancer
  traefik:
    image: traefik:v3.0
    container_name: terrafusion-traefik
    restart: unless-stopped
    command:
      - --api.dashboard=true
      - --api.debug=true
      - --log.level=INFO
      - --providers.docker=true
      - --providers.docker.exposedbydefault=false
      - --entrypoints.web.address=:80
      - --entrypoints.websecure.address=:443
      - --certificatesresolvers.letsencrypt.acme.email=${ACME_EMAIL}
      - --certificatesresolvers.letsencrypt.acme.storage=/acme.json
      - --certificatesresolvers.letsencrypt.acme.httpchallenge.entrypoint=web
    ports:
      - "80:80"
      - "443:443"
      - "8080:8080"
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock:ro
      - traefik-data:/acme.json
    networks:
      - terrafusion-network
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.traefik.rule=Host(`traefik.${DOMAIN}`)"
      - "traefik.http.routers.traefik.tls=true"
      - "traefik.http.routers.traefik.tls.certresolver=letsencrypt"

  # Prometheus Monitoring
  prometheus:
    image: prom/prometheus:latest
    container_name: terrafusion-prometheus
    restart: unless-stopped
    ports:
      - "9090:9090"
    volumes:
      - ./deployment/prometheus/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus-data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/usr/share/prometheus/console_libraries'
      - '--web.console.templates=/usr/share/prometheus/consoles'
      - '--web.enable-lifecycle'
      - '--web.enable-admin-api'
    networks:
      - terrafusion-network
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.prometheus.rule=Host(`prometheus.${DOMAIN}`)"
      - "traefik.http.routers.prometheus.tls=true"
      - "traefik.http.routers.prometheus.tls.certresolver=letsencrypt"

  # Grafana Dashboards
  grafana:
    image: grafana/grafana:latest
    container_name: terrafusion-grafana
    restart: unless-stopped
    ports:
      - "3001:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_PASSWORD}
      - GF_SECURITY_ADMIN_USER=admin
      - GF_USERS_ALLOW_SIGN_UP=false
      - GF_INSTALL_PLUGINS=grafana-piechart-panel,grafana-worldmap-panel
    volumes:
      - grafana-data:/var/lib/grafana
      - ./deployment/grafana/dashboards:/etc/grafana/provisioning/dashboards
      - ./deployment/grafana/datasources:/etc/grafana/provisioning/datasources
    depends_on:
      - prometheus
    networks:
      - terrafusion-network
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.grafana.rule=Host(`grafana.${DOMAIN}`)"
      - "traefik.http.routers.grafana.tls=true"
      - "traefik.http.routers.grafana.tls.certresolver=letsencrypt"

  # Node Exporter (System Metrics)
  node-exporter:
    image: prom/node-exporter:latest
    container_name: terrafusion-node-exporter
    restart: unless-stopped
    ports:
      - "9100:9100"
    volumes:
      - /proc:/host/proc:ro
      - /sys:/host/sys:ro
      - /:/rootfs:ro
    command:
      - '--path.procfs=/host/proc'
      - '--path.sysfs=/host/sys'
      - '--collector.filesystem.mount-points-exclude=^/(sys|proc|dev|host|etc)($$|/)'
    networks:
      - terrafusion-network

  # PostgreSQL Exporter (Database Metrics)
  postgres-exporter:
    image: prometheuscommunity/postgres-exporter:latest
    container_name: terrafusion-postgres-exporter
    restart: unless-stopped
    environment:
      - DATA_SOURCE_NAME=postgresql://terrafusion:${POSTGRES_PASSWORD}@db:5432/terrafusion?sslmode=disable
    ports:
      - "9187:9187"
    depends_on:
      - db
    networks:
      - terrafusion-network

  # Redis Exporter (Cache Metrics)
  redis-exporter:
    image: oliver006/redis_exporter:latest
    container_name: terrafusion-redis-exporter
    restart: unless-stopped
    environment:
      - REDIS_ADDR=redis://redis:6379
      - REDIS_PASSWORD=${REDIS_PASSWORD}
    ports:
      - "9121:9121"
    depends_on:
      - redis
    networks:
      - terrafusion-network

  # Log Aggregation (Optional)
  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:8.8.0
    container_name: terrafusion-elasticsearch
    restart: unless-stopped
    environment:
      - discovery.type=single-node
      - ES_JAVA_OPTS=-Xms512m -Xmx512m
      - xpack.security.enabled=false
    volumes:
      - elasticsearch-data:/usr/share/elasticsearch/data
    ports:
      - "9200:9200"
    networks:
      - terrafusion-network
    profiles:
      - logging

  # Kibana Dashboard (Optional)
  kibana:
    image: docker.elastic.co/kibana/kibana:8.8.0
    container_name: terrafusion-kibana
    restart: unless-stopped
    environment:
      - ELASTICSEARCH_HOSTS=http://elasticsearch:9200
    ports:
      - "5601:5601"
    depends_on:
      - elasticsearch
    networks:
      - terrafusion-network
    profiles:
      - logging
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.kibana.rule=Host(`kibana.${DOMAIN}`)"
      - "traefik.http.routers.kibana.tls=true"
      - "traefik.http.routers.kibana.tls.certresolver=letsencrypt"

  # Backup Service
  backup:
    image: postgres:15-alpine
    container_name: terrafusion-backup
    restart: "no"
    environment:
      - POSTGRES_DB=terrafusion
      - POSTGRES_USER=terrafusion
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - BACKUP_RETENTION_DAYS=30
    volumes:
      - postgres-data:/var/lib/postgresql/data
      - backup-data:/backups
      - ./deployment/scripts/backup.sh:/backup.sh
    networks:
      - terrafusion-network
    profiles:
      - backup
    command: ["/backup.sh"]

volumes:
  postgres-data:
    driver: local
  redis-data:
    driver: local
  app-logs:
    driver: local
  app-uploads:
    driver: local
  ssl-certs:
    driver: local
  traefik-data:
    driver: local
  prometheus-data:
    driver: local
  grafana-data:
    driver: local
  elasticsearch-data:
    driver: local
  backup-data:
    driver: local

networks:
  terrafusion-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16